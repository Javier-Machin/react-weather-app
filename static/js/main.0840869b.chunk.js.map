{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WeatherDataDisplay","data","this","props","parseInt","cod","react_default","a","createElement","Fragment","name","Math","round","main","temp","clouds","all","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","className","App_WeatherDataDisplay","fetch","response","json","console","log","setState","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAGMA,0LAEF,IAAMC,EAAOC,KAAKC,MAAMF,KAGxB,OAFaG,SAASF,KAAKC,MAAMF,KAAKI,MAGpC,KAAK,IACH,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACAH,EAAAC,EAAAC,cAAA,UACGP,EAAKS,KADR,iBAC4BC,KAAKC,MAAMX,EAAKY,KAAKC,KAAO,QADxD,SAGAR,EAAAC,EAAAC,cAAA,SAAIP,EAAKc,OAAOC,IAAM,GAAK,SAAW,UAG1C,KAAK,IACH,OAAOV,EAAAC,EAAAC,cAAA,4BACT,KAAK,IACH,OAAOF,EAAAC,EAAAC,cAAA,iCACT,QACE,OAAO,aApBkBS,IAAMC,YAwDxBC,cA9Bb,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KACDuB,MAAQ,CACXzB,KAAM,CAACI,IAAK,IAHGe,wEAQjB,OACEd,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBACbrB,EAAAC,EAAAC,cAACoB,EAAD,CAAoB3B,KAAMC,KAAKwB,MAAMzB,6LAOhB4B,MAAK,iIAAtBC,kBAGaA,EAASC,cAAtBA,SACNC,QAAQC,IAAIF,GACZ7B,KAAKgC,SAAS,CAAEjC,KAAM8B,sDAEtB7B,KAAKgC,SAAS,CAAEjC,KAAM,CAACI,IAAK,0HAzBhBa,aClBEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0840869b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/App.css';\n\nclass WeatherDataDisplay extends React.Component {\n  render() {\n    const data = this.props.data;\n    const code = parseInt(this.props.data.cod);\n    \n    switch (code) {\n      case 200:\n        return(\n          <React.Fragment>\n          <h1>\n            {data.name} temperature: {Math.round(data.main.temp - 273.15)}ÂºC\n          </h1>\n          <p>{data.clouds.all > 50 ? \"cloudy\" : \"clear\"}</p>\n          </React.Fragment>\n        );\n      case 404:\n        return(<h1>City not found</h1>);\n      case 503:\n        return(<h1>Service unavailable</h1>);\n      default:\n        return null;\n      }\n  };\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      data: {cod: 0}\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <WeatherDataDisplay data={this.state.data} />\n      </div>\n    );\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=provincia+de+las+palmas&APPID=a58c376530b8af49dfeb836d445fd911`\n      );\n      const json = await response.json();\n      console.log(json);\n      this.setState({ data: json });\n    } catch(error) {\n      this.setState({ data: {cod: 503}});\n    }\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}