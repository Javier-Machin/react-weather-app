{"version":3,"sources":["lib/requestData.js","components/LocationForm.js","components/WeatherDataDisplay.js","App.js","serviceWorker.js","index.js"],"names":["_callee","location","response","json","_this","this","regenerator_default","a","wrap","_context","prev","next","fetch","concat","sent","console","log","setTimeout","setState","data","loading","t0","cod","stop","requestData","LocationForm","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","event","defineProperty","target","name","value","preventDefault","handleLocationChange","_this2","react_default","createElement","onSubmit","onChange","type","Component","WeatherDataDisplay","parseInt","Fragment","Math","round","main","temp","clouds","all","App","className","components_LocationForm","components_WeatherDataDisplay","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e54e184.chunk.js","sourcesContent":["async function requestData(location) {\n  try {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=a58c376530b8af49dfeb836d445fd911`\n    );\n    const json = await response.json();\n    console.log(json);\n    // Fake extra loading time before setting state\n    setTimeout(()=>{this.setState({ \n      data: json, \n      loading: false\n    })}, 1000);\n  } catch(error) {\n    this.setState({ data: {cod: 503}});\n  }\n}\n\nexport default requestData","import React, { Component } from 'react';\n\nclass LocationForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.handleLocationChange(this.state.location);\n  }\n\n  render() {\n    return(\n      <form onSubmit={(event) => this.handleSubmit(event)}>\n        <label>City:</label>\n        <input name=\"location\" onChange={this.handleChange} type=\"text\" />\n        <input type=\"submit\" />\n      </form>\n    )\n  }\n}\n\nexport default LocationForm","import React, { Component } from 'react';\n\nclass WeatherDataDisplay extends Component {\n  render() {\n    const data = this.props.data;\n    const code = parseInt(this.props.data.cod);\n    \n    switch (code) {\n      case 200:\n        return(\n          <React.Fragment>\n          <h1>\n            {data.name} temperature: {Math.round(data.main.temp - 273.15)}ÂºC\n          </h1>\n          <p>{data.clouds.all > 50 ? \"cloudy\" : \"clear\"}</p>\n          </React.Fragment>\n        );\n      case 404:\n        return(<h1>City not found</h1>);\n      case 503:\n        return(<h1>Service unavailable</h1>);\n      default:\n        return null;\n      }\n  };\n}\n\nexport default WeatherDataDisplay","import React, { Component } from 'react';\nimport requestData from './lib/requestData';\nimport LocationForm from './components/LocationForm';\nimport WeatherDataDisplay from './components/WeatherDataDisplay';\nimport './css/App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: \"madrid\", \n      data: {cod: 0},\n      loading: true\n    }\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.requestData = requestData.bind(this);\n  }\n\n  componentDidMount() {\n    this.requestData(this.state.location);\n  }\n\n  handleLocationChange(location) {\n    this.requestData(location);\n    this.setState({location: `${location}`});\n  }\n\n  render() {\n    if (this.state.loading === true) {\n      return(\n        <div className=\"main-container\">\n          <LocationForm handleLocationChange={this.handleLocationChange} /> \n          <h3>LOADING</h3>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"main-container\">\n          <LocationForm handleLocationChange={this.handleLocationChange} /> \n          <WeatherDataDisplay data={this.state.data} />\n        </div>\n      );\n    }\n  }\n \n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}